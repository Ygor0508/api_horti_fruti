// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Feirante {
  id                Int          @id @default(autoincrement())
  nome              String       @db.VarChar(60)
  email             String       @db.VarChar(60)
  senha             String       @db.VarChar(60)
  telefone          String       @db.VarChar(60)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt()
  mercadorias       Mercadoria[]
  fotos_mercadoria  FotoMercadoria[]
  // usuario           Usuario      @relation(fields: [usuario_id], references: [id])
  // usuario_id        String
  admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     String?    @db.VarChar(36)
  @@map("feirantes")
}

model Mercadoria {
  id                  Int                @id @default(autoincrement())
  nome                String             @db.VarChar(60)
  preco               Decimal            @db.Decimal(10, 2)
  quantidade          Decimal            @db.Decimal(10, 2)
  categoria           Categoria          @default(FRUTAS)
  unidade             Unidade            @default(UN)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt()
  foto                String
  feirante            Feirante          @relation(fields: [feirante_id], references: [id])
  feirante_id         Int
  destaque            Boolean            @default(true)
  fotos               FotoMercadoria[]
  // usuario             Usuario      @relation(fields: [usuario_id], references: [id])
  // usuario_id          String
  pedidos             Pedido[]
  carrinho            Carrinho[]
  @@map("mercadorias")
}

enum Categoria {
  FRUTAS
  LEGUMES
  VERDURAS
  TEMPEROS
}

model FotoMercadoria {
  id           Int        @id @default(autoincrement())
  descricao    String     @db.VarChar(60)
  url          String
  mercadoria   Mercadoria @relation(fields: [mercadoria_id], references: [id])
  mercadoria_id Int
  feirante     Feirante          @relation(fields: [feirante_id], references: [id])
  feirante_id  Int
  @@map("fotos_mercadoria")
}

model Usuario {
  id                  String   @db.VarChar(36) @id @default(uuid())
  nome                String   @db.VarChar(60)
  email               String   @unique @db.VarChar(60)
  telefone            String   @db.VarChar(60) @default("")
  endereco            String   @db.VarChar(60) @default("")
  bairro              String   @db.VarChar(60) @default("")
  senha               String   @db.VarChar(60)
  nivel               Int      @default(1) // 1: Padr√£o, 2: Moderador, 3: Administrador
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  codigoRecuperacao   String?  
  // novaSenha           String?  @db.VarChar(60)
  // confirmarSenha      String?  @db.VarChar(60)
  // mercadorias         Mercadoria[]
  // feirantes           Feirante[]
  pedidos             Pedido[]
  carrinho            Carrinho[]
  @@map("usuarios") 
}

model Pedido {
  id             Int                @id @default(autoincrement())
  quantidade     Decimal            @db.Decimal(10, 2) @default(0.00)
  unidade_medida  String            @default("UN")
  status         Status             @default(EM_PREPARACAO)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime?          @updatedAt()
  mercadoria     Mercadoria         @relation(fields: [mercadoria_id], references: [id])
  mercadoria_id  Int
  usuario        Usuario            @relation(fields: [usuario_id], references: [id])
  usuario_id     String             @db.VarChar(36)
  admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     String?    @db.VarChar(36)
  @@map("pedidos")
}

model Carrinho {
  id             Int                @id @default(autoincrement())
  quantidade     Decimal            @db.Decimal(10, 2) @default(0.00)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime?          @updatedAt()
  mercadoria     Mercadoria         @relation(fields: [mercadoria_id], references: [id])
  mercadoria_id  Int
  usuario        Usuario            @relation(fields: [usuario_id], references: [id])
  usuario_id     String             @db.VarChar(36)
  @@map("carrinho")
}


enum Status {
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
  PENDENTE
  ENTREGUE
  EM_PREPARACAO
  EM_ROTA
  RETORNANDO
}

enum Unidade {
  UN
  KG
  CX
}

model Admin {
  id            String   @db.VarChar(36) @id @default(uuid())
  nome          String   @db.VarChar(60)
  email         String   @db.VarChar(40)
  senha         String   @db.VarChar(60)   // senha deve ser varchar(60)
  nivel         Int      @db.SmallInt @default(2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt  
  Feirante      Feirante[]
  pedido        Pedido[]
  @@map("admins")
}